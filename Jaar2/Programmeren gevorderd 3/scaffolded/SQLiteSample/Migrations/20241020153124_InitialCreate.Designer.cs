// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Northwind;

#nullable disable

namespace SQLiteSample.Migrations
{
    [DbContext(typeof(NwContext))]
    [Migration("20241020153124_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Northwind.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar (15)");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("image");

                    b.HasKey("CategoryId");

                    b.HasIndex(new[] { "CategoryName" }, "CategoryName");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Northwind.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nchar (5)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar (60)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar (15)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar (40)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar (30)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("nvarchar (30)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar (15)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar (24)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar (24)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar (10)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar (15)");

                    b.HasKey("CustomerId");

                    b.HasIndex(new[] { "City" }, "City");

                    b.HasIndex(new[] { "CompanyName" }, "CompanyNameCustomers");

                    b.HasIndex(new[] { "PostalCode" }, "PostalCodeCustomers");

                    b.HasIndex(new[] { "Region" }, "Region");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Northwind.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar (60)");

                    b.Property<string>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar (15)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar (15)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar (4)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar (10)");

                    b.Property<string>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar (24)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar (20)");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("image");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar (255)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar (10)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar (15)");

                    b.Property<int?>("ReportsTo")
                        .HasColumnType("INT");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar (30)");

                    b.Property<string>("TitleOfCourtesy")
                        .HasColumnType("nvarchar (25)");

                    b.HasKey("EmployeeId");

                    b.HasIndex(new[] { "LastName" }, "LastName");

                    b.HasIndex(new[] { "PostalCode" }, "PostalCodeEmployees");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Northwind.EmployeeTerritory", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("INT");

                    b.Property<string>("TerritoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar] (20");

                    b.ToTable("EmployeeTerritories");
                });

            modelBuilder.Entity("Northwind.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nchar (5)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("INT");

                    b.Property<double?>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0.0);

                    b.Property<string>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequiredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShipAddress")
                        .HasColumnType("nvarchar (60)");

                    b.Property<string>("ShipCity")
                        .HasColumnType("nvarchar (15)");

                    b.Property<string>("ShipCountry")
                        .HasColumnType("nvarchar (15)");

                    b.Property<string>("ShipName")
                        .HasColumnType("nvarchar (40)");

                    b.Property<string>("ShipPostalCode")
                        .HasColumnType("nvarchar (10)");

                    b.Property<string>("ShipRegion")
                        .HasColumnType("nvarchar (15)");

                    b.Property<int?>("ShipVia")
                        .HasColumnType("INT");

                    b.Property<string>("ShippedDate")
                        .HasColumnType("datetime");

                    b.HasKey("OrderId");

                    b.HasIndex(new[] { "CustomerId" }, "CustomerId");

                    b.HasIndex(new[] { "CustomerId" }, "CustomersOrders");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeId");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeesOrders");

                    b.HasIndex(new[] { "OrderDate" }, "OrderDate");

                    b.HasIndex(new[] { "ShipPostalCode" }, "ShipPostalCode");

                    b.HasIndex(new[] { "ShippedDate" }, "ShippedDate");

                    b.HasIndex(new[] { "ShipVia" }, "ShippersOrders");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Northwind.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("INT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INT");

                    b.Property<double>("Discount")
                        .HasColumnType("REAL");

                    b.Property<short>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1);

                    b.Property<double>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex(new[] { "OrderId" }, "OrderId");

                    b.HasIndex(new[] { "OrderId" }, "OrdersOrder_Details");

                    b.HasIndex(new[] { "ProductId" }, "ProductId");

                    b.HasIndex(new[] { "ProductId" }, "ProductsOrder_Details");

                    b.ToTable("Order Details");
                });

            modelBuilder.Entity("Northwind.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INT");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar (40)");

                    b.Property<string>("QuantityPerUnit")
                        .HasColumnType("nvarchar (20)");

                    b.Property<short?>("ReorderLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<int?>("SupplierId")
                        .HasColumnType("INT");

                    b.Property<double?>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0.0);

                    b.Property<short?>("UnitsInStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short?>("UnitsOnOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasKey("ProductId");

                    b.HasIndex(new[] { "CategoryId" }, "CategoriesProducts");

                    b.HasIndex(new[] { "CategoryId" }, "CategoryId");

                    b.HasIndex(new[] { "ProductName" }, "ProductName");

                    b.HasIndex(new[] { "SupplierId" }, "SupplierId");

                    b.HasIndex(new[] { "SupplierId" }, "SuppliersProducts");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Northwind.Shipper", b =>
                {
                    b.Property<int>("ShipperId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar (40)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar (24)");

                    b.HasKey("ShipperId");

                    b.ToTable("Shippers");
                });

            modelBuilder.Entity("Northwind.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar (60)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar (15)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar (40)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar (30)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("nvarchar (30)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar (15)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar (24)");

                    b.Property<string>("HomePage")
                        .HasColumnType("ntext");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar (24)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar (10)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar (15)");

                    b.HasKey("SupplierId");

                    b.HasIndex(new[] { "CompanyName" }, "CompanyNameSuppliers");

                    b.HasIndex(new[] { "PostalCode" }, "PostalCodeSuppliers");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Northwind.Territory", b =>
                {
                    b.Property<int>("RegionId")
                        .HasColumnType("INT");

                    b.Property<string>("TerritoryDescription")
                        .IsRequired()
                        .HasColumnType("nchar] (50");

                    b.Property<string>("TerritoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar] (20");

                    b.ToTable("Territories");
                });

            modelBuilder.Entity("Northwind.Order", b =>
                {
                    b.HasOne("Northwind.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Northwind.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Northwind.Shipper", "ShipViaNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("ShipVia");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("ShipViaNavigation");
                });

            modelBuilder.Entity("Northwind.OrderDetail", b =>
                {
                    b.HasOne("Northwind.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.HasOne("Northwind.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Northwind.Product", b =>
                {
                    b.HasOne("Northwind.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Northwind.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Northwind.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Northwind.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Northwind.Employee", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Northwind.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Northwind.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Northwind.Shipper", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Northwind.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
